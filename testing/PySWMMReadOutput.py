from ctypes import *import syssys.path.append("..")from _toolkitpyswmm import *#Used just to pull the Pointer of the SMOutputAPI structclass _Opaque(Structure):    passFileLoc = 'C:\\PROJECTCODE\\SWMMOutputAPI\\testing\\OutputTestModel522_SHORT.out'## READ DLLTestDLL = CDLL('C:\\PROJECTCODE\\SWMMOutputAPI\\data\\outputAPI_winx86.dll')## Pointer to SMOutputAPI structopaque_ptr = POINTER(_Opaque)smoapi = pointer(_Opaque())#OPEN FILE FUNCTION HANDLEOpenFunc = TestDLL.SMR_openOpenFunc.argtypes = [POINTER(c_char), POINTER(POINTER(_Opaque))]OpenFunc.restype = c_intOpaqueStruc = c_longret = OpenFunc(FileLoc, byref(smoapi))print "Function Returns: "+ str(ret)SMO_getProjectSize = TestDLL.SMO_getProjectSizeSMO_getProjectSize.argtypes = [POINTER(_Opaque), c_int, POINTER(c_int)]SMO_getProjectSize.restype = c_int##########################SMO_getProjectSize(SMOutputAPI* smoapi, SMO_elementCount code, int* count);x = c_int()Ret2 = SMO_getProjectSize(smoapi, subcatchCount, byref(x))print Ret2print "Subcatchments: " + str(x.value)x = c_int()Ret2 = SMO_getProjectSize(smoapi, nodeCount, byref(x))print Ret2print "Nodes: " + str(x.value)x = c_int()Ret2 = SMO_getProjectSize(smoapi, linkCount, byref(x))print Ret2print "Links: " + str(x.value)x = c_int()Ret2 = SMO_getProjectSize(smoapi, pollutantCount, byref(x))print Ret2print "Pollutants: " + str(x.value)#########################print "\n\nTesting Times"###int DLLEXPORT SMO_getTimes(SMOutputAPI* smoapi, SMO_time code, int* time);SMO_getTimes = TestDLL.SMO_getTimesSMO_getTimes.argtypes = [POINTER(_Opaque), c_int, POINTER(c_int)]SMO_getTimes.restype = c_intStartTime = c_int()Ret2 = SMO_getTimes(smoapi, reportStart, byref(StartTime))print Ret2print "StartTime: " + str(StartTime.value)NPeriods = c_int()Ret2 = SMO_getTimes(smoapi, numPeriods, byref(NPeriods))print Ret2print "Number of Periods:" + str(NPeriods.value)#################################class _ReturnIDS(Structure):    pass_ReturnIDS._fields_ = [    ("ID", c_char_p),    ("next", POINTER(_ReturnIDS))]_getSubcatchIDs = TestDLL.SMO_getSubcatchIDs_getSubcatchIDs.restype = POINTER(_ReturnIDS)ErrNo1 = c_int() id_List = _getSubcatchIDs(smoapi, byref(ErrNo1))print ErrNo1.value##############################int DLLEXPORT SMO_getUnits(SMOutputAPI* smoapi, SMO_unit code, int* unitFlag);#############################print "\n\nTesting Build Array"##float* DLLEXPORT SMO_newOutValueArray(SMOutputAPI* smoapi, SMO_apiFunction func,##	SMO_elementType type, int* length, int* errcode);SMO_newOutValueArray = TestDLL.SMO_newOutValueArraySMO_newOutValueArray.argtypes = [POINTER(_Opaque), c_int, c_int, POINTER(c_int), POINTER(c_int)]SMO_newOutValueArray.restype = POINTER(c_float)##int DLLEXPORT SMO_getSubcatchResult(SMOutputAPI* smoapi, int timeIndex, int subcatchIndex,##	float* outValueArray);SMO_getSubcatchResult = TestDLL.SMO_getSubcatchResultSMO_getSubcatchResult.argtypes = [POINTER(_Opaque), c_int, c_int,\                                  POINTER(c_float)]SMO_getSubcatchResult.restype = c_int##int DLLEXPORT SMO_getNodeResult(SMOutputAPI* smoapi, int timeIndex, int nodeIndex,##	float* outValueArray);SMO_getNodeResult = TestDLL.SMO_getNodeResultSMO_getNodeResult.argtypes = [POINTER(_Opaque), c_int, c_int,\                                  POINTER(c_float)]SMO_getNodeResult.restype = c_int##int DLLEXPORT SMO_getLinkResult(SMOutputAPI* smoapi, int timeIndex, int linkIndex,##	float* outValueArray);SMO_getLinkResult = TestDLL.SMO_getLinkResultSMO_getLinkResult.argtypes = [POINTER(_Opaque), c_int, c_int,\                                  POINTER(c_float)]SMO_getLinkResult.restype = c_int##int DLLEXPORT SMO_getSystemResult(SMOutputAPI* smoapi, int timeIndex, float* outValueArray);SMO_getSystemResult = TestDLL.SMO_getSystemResultSMO_getSystemResult.argtypes = [POINTER(_Opaque), c_int, POINTER(c_float)]SMO_getSystemResult.restype = c_intalength = c_int()aerror = c_int()Array0 = SMO_newOutValueArray(smoapi, getResult, SM_subcatch, byref(alength), byref(aerror))print "Error: "+str(aerror.value)print "Array Length: " + str(alength.value)##print Array0SMO_getSubcatchResult(smoapi, 0, 0, Array0)NewArray = [float]*alength.valuefor i in range(alength.value):    print Array0[i]    NewArray[i] = Array0[i]SMO_free = TestDLL.SMO_freeSMO_free.argtypes = [POINTER(_Opaque),POINTER(c_float)]SMO_free.restype = c_intSMO_free(smoapi, Array0)print "\n\nTesting Free Memory"for i in range(alength.value):    print Array0[i]#######################################print "\n\nTesting Build Series"##float* DLLEXPORT SMO_newOutValueSeries(SMOutputAPI* smoapi, int seriesStart,##	int seriesLength, int* length, int* errcode);SMO_newOutValueSeries = TestDLL.SMO_newOutValueSeriesSMO_newOutValueSeries.argtypes = [POINTER(_Opaque), c_int, c_int, POINTER(c_int), POINTER(c_int)]SMO_newOutValueSeries.restype = POINTER(c_float)##int DLLEXPORT SMO_getSubcatchSeries(SMOutputAPI* smoapi, int subcatchIndex,##	SMO_subcatchAttribute attr, int timeIndex, int length, float* outValueSeries);SMO_getSubcatchSeries = TestDLL.SMO_getSubcatchSeriesSMO_getSubcatchSeries.argtypes = [POINTER(_Opaque), c_int, c_int, c_int, c_int, POINTER(c_float)]SMO_getSubcatchSeries.restype = c_int##int DLLEXPORT SMO_getSubcatchSeries(SMOutputAPI* smoapi, int subcatchIndex,##	SMO_subcatchAttribute attr, int timeIndex, int length, float* outValueSeries);SMO_getNodeSeries = TestDLL.SMO_getNodeSeriesSMO_getNodeSeries.argtypes = [POINTER(_Opaque), c_int, c_int, c_int, c_int, POINTER(c_float)]SMO_getNodeSeries.restype = c_int##int DLLEXPORT SMO_getSubcatchSeries(SMOutputAPI* smoapi, int subcatchIndex,##	SMO_subcatchAttribute attr, int timeIndex, int length, float* outValueSeries);SMO_getLinkSeries = TestDLL.SMO_getLinkSeriesSMO_getLinkSeries.argtypes = [POINTER(_Opaque), c_int, c_int, c_int, c_int, POINTER(c_float)]SMO_getLinkSeries.restype = c_int##int DLLEXPORT SMO_getSystemSeries(SMOutputAPI* smoapi, SMO_systemAttribute attr,##	int timeIndex, int length, float *outValueSeries);SMO_getSystemSeries = TestDLL.SMO_getSystemSeriesSMO_getSystemSeries.argtypes = [POINTER(_Opaque), c_int, c_int, c_int, POINTER(c_float)]SMO_getSystemSeries.restype = c_intslength = c_int()aerror = c_int()seriesStart = 0seriesLength = 100000Series0 = SMO_newOutValueSeries(smoapi, seriesStart, seriesLength, byref(slength), byref(aerror))ret = SMO_getSubcatchSeries(smoapi, 0, runoff_rate, 0, slength.value, Series0)NewSeries = [float]*slength.valueprint "\n\n\nTesting Series "for i in range(slength.value):        NewSeries[i] = Series0[i]##    print NewSeries[i]SMO_free(smoapi, Series0)#######################################print "\n\nTesting Series for one TS for one Attr for all Objects"##int DLLEXPORT SMO_getSubcatchAttribute(SMOutputAPI* smoapi, int timeIndex,##	SMO_subcatchAttribute attr, float* outValueArray);SMO_getSubcatchAttribute = TestDLL.SMO_getSubcatchAttributeSMO_getSubcatchAttribute.argtypes = [POINTER(_Opaque), c_int, c_int, POINTER(c_float)]SMO_getSubcatchAttribute.restype = c_int##int DLLEXPORT SMO_getNodeAttribute(SMOutputAPI* smoapi, int timeIndex,##	SMO_nodeAttribute attr, float* outValueArray);SMO_getNodeAttribute = TestDLL.SMO_getNodeAttributeSMO_getNodeAttribute.argtypes = [POINTER(_Opaque), c_int, c_int, POINTER(c_float)]SMO_getNodeAttribute.restype = c_int##int DLLEXPORT SMO_getLinkAttribute(SMOutputAPI* smoapi, int timeIndex,##	SMO_linkAttribute attr, float* outValueArray);SMO_getLinkAttribute = TestDLL.SMO_getLinkAttributeSMO_getLinkAttribute.argtypes = [POINTER(_Opaque), c_int, c_int, POINTER(c_float)]SMO_getLinkAttribute.restype = c_int##int DLLEXPORT SMO_getSystemAttribute(SMOutputAPI* smoapi, int timeIndex,##	SMO_systemAttribute attr, float* outValueArray);SMO_getSystemAttribute = TestDLL.SMO_getSystemAttributeSMO_getSystemAttribute.argtypes = [POINTER(_Opaque), c_int, c_int, POINTER(c_float)]SMO_getSystemAttribute.restype = c_intalength = c_int()aerror = c_int()Array12 = SMO_newOutValueArray(smoapi, getAttribute, SM_subcatch, byref(alength), byref(aerror))print "Error: "+str(aerror.value)print "Array Length: " + str(alength.value)##print Array0SMO_getNodeAttribute(smoapi, 19, hydraulic_head, Array12)NewArray = [float]*alength.valuefor i in range(alength.value):    NewArray[i] = Array12[i]    print NewArray[i]SMO_free(smoapi, Array12)######################### Close TestSMO_close = TestDLL.SMO_closeSMO_close.argtypes = [POINTER(_Opaque)]SMO_close.restype = c_intRet2 = SMO_close(smoapi)print "Closed funct" + str(Ret2)